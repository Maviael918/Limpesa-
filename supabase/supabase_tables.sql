-- Supabase table schema for Clean Kit Planner
-- Run this in your Supabase SQL editor to create the tables.

create table if not exists schools (
  id bigint generated by default as identity primary key,
  name text not null,
  sector text,
  manager_name text,
  address text,
  modality text,
  students int,
  created_at timestamptz default now()
);

create table if not exists products (
  id bigint generated by default as identity primary key,
  name text not null,
  created_at timestamptz default now()
);

create table if not exists units (
  id bigint generated by default as identity primary key,
  name text not null,
  created_at timestamptz default now()
);

create table if not exists kits (
  id bigint generated by default as identity primary key,
  kit_type text not null, -- 'p', 'm', 'g'
  product jsonb not null, -- store product entries as JSON { product: 'Sabao', quantity: 2, unit: 'un' }
  created_at timestamptz default now()
);

create table if not exists stock (
  product text primary key,
  quantity int not null,
  unit text,
  updated_at timestamptz default now()
);

create table if not exists orders (
  id bigint generated by default as identity primary key,
  order_date date default now(),
  school_data jsonb not null,
  items_data jsonb not null,
  observations text,
  created_at timestamptz default now()
);

-- profiles table to store user roles and other public profile data
create table if not exists profiles (
  id uuid references auth.users on delete cascade primary key,
  role text default 'limpeza' not null, -- 'admin', 'limpeza', 'alimentacao'
  created_at timestamptz default now()
);

-- Set up Row Level Security (RLS)
alter table profiles enable row level security;

-- Allow authenticated users to read their own profile
create policy "Users can view their own profile" on profiles
  for select using (auth.uid() = id);

-- Allow admin to insert new profiles (e.g., when a new user signs up)
-- This policy might need to be more sophisticated in a real app.
create policy "Admins can insert profiles" on profiles
  for insert with check (true); -- Simplified for now, ideally check if inserter is admin

-- Allow admin to update any profile
create policy "Admins can update all profiles" on profiles
  for update using (true); -- Simplified for now, ideally check if updater is admin

-- Allow admin to delete profiles
create policy "Admins can delete profiles" on profiles
  for delete using (true); -- Simplified for now, ideally check if deleter is admin